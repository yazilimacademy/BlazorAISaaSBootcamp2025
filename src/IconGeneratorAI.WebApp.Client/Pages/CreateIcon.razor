@page "/create-icon"
@using System.ComponentModel.DataAnnotations
@using IconGeneratorAI.Domain.Dtos
@using IconGeneratorAI.Domain.Entities
@using IconGeneratorAI.Shared.Enums
@using IconGeneratorAI.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json
@inject IToastService ToastService

@inject HttpClient Http

@attribute [Authorize]

@rendermode InteractiveWebAssembly

<div class="min-h-screen bg-base-200 py-8 px-4">
    <div class="max-w-2xl mx-auto">
        <div class="card bg-base-100 shadow-xl">
            <div class="card-body">
                <h2 class="card-title text-2xl font-bold text-center mb-6">Generate Your Dream Icon</h2>

                @if (aiModels is null)
                {
                    <div class="flex flex-col items-center mt-8">
                        <span class="loading loading-spinner loading-lg text-primary"></span>
                        <p class="mt-4 text-base-content/70">Loading AI models...</p>
                    </div>
                }
                else
                {
                    <EditForm Model="@formModel" OnValidSubmit="HandleValidSubmit" FormName="createIconForm">
                        <div class="form-control w-full mb-4">
                            <label class="label">
                                <span class="label-text font-medium">Prompt</span>
                                <span class="label-text-alt text-base-content/70">Be descriptive for better results</span>
                            </label>
                            <div class="relative">
                                <InputTextArea id="prompt"
                                    class="textarea textarea-bordered min-h-[120px] text-base leading-relaxed focus:textarea-primary w-full bg-base-100"
                                    placeholder="Describe your dream icon in detail. For example: A minimalist logo of a mountain peak at sunset, with geometric shapes, using pastel colors..."
                                    @bind-Value="formModel.Prompt" />
                                <div class="absolute bottom-3 right-3">
                                    <button @onclick="HandleMagicClick" type="button"
                                        class="inline-flex items-center justify-center w-8 h-8 rounded-lg hover:bg-base-200/50 transition-all duration-300 hover:scale-110 hover:rotate-12 group"
                                        disabled="@isMagicLoading">
                                        @if (isMagicLoading)
                                        {
                                            <span class="loading loading-spinner loading-sm"></span>
                                        }
                                        else
                                        {
                                            <img src="/icons/magic-stick-3-svgrepo-com.svg" alt="Magic Wand"
                                                class="w-5 h-5 [&>path]:fill-yellow-400 yellow-400 relative group-hover:animate-pulse"
                                                title="Get AI suggestions" />
                                        }
                                        <div class="absolute inset-0 -z-10 animate-pulse group-hover:animate-none">
                                            <div
                                                class="absolute inset-0 rounded-lg bg-yellow-400/20 blur-sm group-hover:blur-md transition-all">
                                            </div>
                                        </div>
                                    </button>
                                </div>
                            </div>
                            <label class="label">
                                <span class="label-text-alt text-base-content/70">
                                    <span class="@(formModel.Prompt?.Length > 450 ? "text-error" : "")">
                                        @(formModel.Prompt?.Length ?? 0)/500
                                    </span>
                                </span>
                            </label>
                            <ValidationMessage For="@(() => formModel.Prompt)" class="text-error text-sm mt-1" />
                        </div>

                        <div class="form-control w-full mb-6">
                            <label class="label">
                                <span class="label-text font-medium">Model</span>
                            </label>
                            <InputSelect id="model" class="select select-bordered select-lg w-full"
                                 TValue="Guid" ValueChanged="HandleModelChange" ValueExpression="@(() => formModel.AIModelId)">

                                <option value="@Guid.Empty" selected>Select model...</option>
                                @foreach (var model in aiModels)
                                {
                                    <option value="@model.Id">@model.Name</option>
                                }

                            </InputSelect>
                            <ValidationMessage For="@(() => formModel.AIModelId)" class="text-error text-sm mt-1" />
                        </div>

                        @if (selectedAIModel is not null)
                        {
                            @foreach (var param in selectedAIModel.Parameters)
                            {
                                <div class="form-control w-full mb-6">
                                    <label class="label">
                                        <span class="label-text font-medium">@param.DisplayName</span>
                                        @if (!string.IsNullOrEmpty(param.DefaultValue))
                                        {
                                            <span class="label-text-alt text-base-content/70">Default: @param.DefaultValue</span>
                                        }
                                    </label>
                                    
                                    @switch (param.Type)
                                    {
                                         case IconGeneratorAI.Shared.Enums.AIModelParameterType.String:
                                            <InputSelect id="@param.Id" class="select select-bordered select-lg w-full"
                                                         @bind-Value="formModel.Parameters.First(p => p.Id == param.Id).Value">
                                                <option value="">Select @param.DisplayName...</option>
                                                @foreach (var value in param.PossibleValues)
                                                {
                                                    <option value="@value">@value</option>
                                                }
                                            </InputSelect>
                                            break;

                                        case IconGeneratorAI.Shared.Enums.AIModelParameterType.Enum:
                                            <InputSelect id="@param.Id" class="select select-bordered select-lg w-full"
                                                         @bind-Value="formModel.Parameters.First(p => p.Id == param.Id).Value">
                                                <option value="">Select @param.DisplayName...</option>
                                                @foreach (var value in param.PossibleValues)
                                                {
                                                    <option value="@value">@value</option>
                                                }
                                            </InputSelect>
                                            break;

                                        case IconGeneratorAI.Shared.Enums.AIModelParameterType.Boolean:
                                            <label class="label cursor-pointer gap-4 px-0">
                                                <span class="label-text flex-1">@param.DisplayName</span>
                                                <input type="checkbox" class="toggle toggle-primary" 
                                                       checked="@(formModel.Parameters.First(p => p.Id == param.Id).Value == "True")"
                                                       @onchange="@(e => UpdateBooleanParameter(param.Id, (bool)e.Value))" />
                                            </label>
                                            break;

                                        case IconGeneratorAI.Shared.Enums.AIModelParameterType.Float:
                                            <InputText id="@param.Id" class="input input-bordered input-lg w-full"
                                                       type="number" step="0.01" @bind-Value="formModel.Parameters.First(p => p.Id == param.Id).Value" />
                                            break;

                                        default:
                                            var inputType = param.Type switch
                                            {
                                                IconGeneratorAI.Shared.Enums.AIModelParameterType.Integer => "number",
                                                _ => "text"
                                            };
                                            <InputText id="@param.Id" class="input input-bordered input-lg w-full"
                                                       type="@inputType" @bind-Value="formModel.Parameters.First(p => p.Id == param.Id).Value"
                                                       />
                                            break;
                                    }
                                    
                                    <ValidationMessage For="@(() => formModel.Parameters.First(p => p.Id == param.Id).Value)" 
                                                     class="text-error text-sm mt-1" />
                                </div>
                            }
                        }

                        <div class="card-actions">
                            @if (isLoading)
                            {
                                <button class="btn btn-primary btn-lg w-full" disabled>
                                    <span class="loading loading-spinner"></span>
                                    Generating...
                                </button>
                            }
                            else
                            {
                                <button type="submit" class="btn btn-primary btn-lg w-full" disabled="@(formModel.AIModelId == Guid.Empty || isLoading)">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24"
                                        stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                            d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" />
                                    </svg>
                                    Generate Icon
                                </button>
                            }
                        </div>
                    </EditForm>
                }

                @if (isLoading)
                {
                    <div class="flex flex-col items-center mt-8">
                        <span class="loading loading-spinner loading-lg text-primary"></span>
                        <p class="mt-4 text-base-content/70">Creating your icon...</p>
                    </div>
                }
                else if (iconResult is not null)
                {
                    <div class="mt-8">
                        <div
                            class="w-full rounded-xl overflow-hidden shadow-lg transition-all duration-300 hover:shadow-2xl">
                            <img src="@iconResult.ImageUrl" alt="@formModel.Prompt" class="w-full h-auto" />
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private FormModel formModel = new();
    private bool isLoading = false;
    private bool isMagicLoading = false;
    private CreateIconGenerationResponseDto iconResult = null;
    private List<GetAllAIModelsDto> aiModels = null;
    private GetAllAIModelsDto selectedAIModel = null;

    protected override async Task OnInitializedAsync()
    {
        aiModels = await Http.GetFromJsonAsync<List<GetAllAIModelsDto>>("/api/ai-models");

        await base.OnInitializedAsync();
    }

    private void HandleModelChange(Guid args)
    {
        if (args == Guid.Empty)
            return;

        var id = args;
        selectedAIModel = aiModels.FirstOrDefault(x => x.Id == id);
        formModel.AIModelId = id;
        
        // Parametreleri initialize et
        formModel.Parameters = selectedAIModel.Parameters.Select(p => 
            new FormParameterModel { 
                Id = p.Id, 
                Value = p.DefaultValue ?? string.Empty 
            }).ToList();


        StateHasChanged();
    }

    private void UpdateBooleanParameter(Guid paramId, bool value)
    {
        var parameter = formModel.Parameters.FirstOrDefault(p => p.Id == paramId);
        if (parameter != null)
        {
            parameter.Value = value.ToString();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isLoading = true;

            var response = await Http.PostAsJsonAsync("/api/icon-generations/", formModel);

            if (response.IsSuccessStatusCode)
            {
                iconResult = await response.Content.ReadFromJsonAsync<CreateIconGenerationResponseDto>();

                ToastService.ShowSuccess("Icon generated successfully!");

                Console.WriteLine("Icon generated successfully!");


            }
            else
            {
                if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    Console.WriteLine("Not found");
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
                {
                    Console.WriteLine("Bad request");
                }
                else
                {
                    Console.WriteLine("Something went wrong");
                }
               
            }
            
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleMagicClick()
    {
        try
        {
            isMagicLoading = true;

            var response = await Http.GetFromJsonAsync<GetPromptResponseDto>($"/api/prompts/improve?prompt={formModel.Prompt}");
            formModel.Prompt = response.ImprovedPrompt;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isMagicLoading = false;
        }
    }

    internal class FormModel
    {
        [Required]
        public Guid AIModelId { get; set; }


        [Required, MinLength(3), MaxLength(500)]
        public string Prompt { get; set; }
        [Required]
        public List<FormParameterModel> Parameters { get; set; } = new();
    }

    internal class FormParameterModel
    {
        public Guid Id { get; set; }
        public string Value { get; set; }
    }

}
