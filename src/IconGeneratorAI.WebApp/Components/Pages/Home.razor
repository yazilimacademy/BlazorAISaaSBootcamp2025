@page "/"
@using IconGeneratorAI.WebApp.Client.Components
@using IconGeneratorAI.Persistence.EntityFramework.Contexts
@using IconGeneratorAI.WebApp.Components.LandingPage
@using IconGeneratorAI.WebApp.Models
@using Microsoft.EntityFrameworkCore
@using IconGeneratorAI.Persistence.EntityFramework.Extensions
@using System.Text.Json

<PageTitle>Icon Generator AI | Your Icon, Your 100M Brand</PageTitle>
<!-- Hero Section: Bold Pattern Interrupt -->
<!-- Hero Section: Bold Pattern Interrupt -->
<HeroSection />


<!-- Problem Section -->
<ProblemSection />

<!-- Solution Section -->
<SolutionSection />

<!-- How It Works + Features Section -->
<FeaturesSection/>

<!-- Social Proof Section -->
<SocialProofSection />

<!-- Pricing Section -->
<PricingSection />

<!-- Final CTA Section -->
<FinalCTASection />

<!-- FAQ Section -->
<!-- FAQ Section -->
<FAQSection />


@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext?.User?.Identity?.IsAuthenticated == true)
            isAuthenticated = true;
    }
}
<style>
    @@keyframes float {
        0% {
            transform: translateY(0);
        }

        50% {
            transform: translateY(-20px);
        }

        100% {
            transform: translateY(0);
        }
    }

    .animate-float {
        animation: float 4s infinite ease-in-out;
    }

    .delay-1000 {
        animation-delay: 1s;
    }

    .delay-2000 {
        animation-delay: 2s;
    }

    .delay-3000 {
        animation-delay: 3s;
    }

    .delay-4000 {
        animation-delay: 4s;
    }

    .delay-5000 {
        animation-delay: 5s;
    }

    .delay-6000 {
        animation-delay: 6s;
    }

    .delay-7000 {
        animation-delay: 7s;
    }

    .delay-8000 {
        animation-delay: 8s;
    }

    .delay-9000 {
        animation-delay: 9s;
    }
</style>