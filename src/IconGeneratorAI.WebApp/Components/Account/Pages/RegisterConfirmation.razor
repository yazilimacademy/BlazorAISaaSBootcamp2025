@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using IconGeneratorAI.Domain.Identity

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register confirmation</PageTitle>

<div class="flex items-center justify-center min-h-screen bg-base-100">
    <div class="card w-full max-w-md bg-base-200 shadow-lg">
        <div class="card-body text-center">
            <h1 class="text-2xl font-bold mb-4 text-white">Register confirmation</h1>
            <StatusMessage Message="@statusMessage" />

            @if (emailConfirmationLink is not null)
            {
                <p class="text-white mb-4">
                    This app does not currently have a real email sender registered, see
                    <a href="https://aka.ms/aspaccountconf" class="link link-hover">these docs</a>
                    for how to configure a real email sender. Normally this would be emailed:
                    <span class="badge badge-primary badge-lg">
                        <a href="@emailConfirmationLink" class="link link-hover">Click here to confirm your account</a>
                    </span>
                </p>
            }
            else
            {
                <p role="alert" class="text-error">Please check your email to confirm your account.</p>
            }
        </div>
    </div>
</div>

@code {
    private string? emailConfirmationLink;
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }
        else if (EmailSender is IdentityNoOpEmailSender)
        {
            // Once you add a real email sender, you should remove this code that lets you confirm the account
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
        }
    }
}
