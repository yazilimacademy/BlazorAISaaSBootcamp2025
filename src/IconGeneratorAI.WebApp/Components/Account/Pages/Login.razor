@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using IconGeneratorAI.Domain.Identity
@using Microsoft.FluentUI.AspNetCore.Components

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IToastService ToastService

<PageTitle>Log in</PageTitle>

<div class="flex items-center justify-center min-h-screen bg-base-100">


    <div class="w-full max-w-md">
        <h1 class="text-2xl font-bold mb-4 text-white text-center">Log in</h1>
        <section class="bg-base-200 p-6 rounded-lg shadow-lg">
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2 class="text-xl font-semibold mb-4 text-white">Use a local account to log in.</h2>
                <hr class="mb-4 border-base-300" />
                <ValidationSummary class="text-error" role="alert" />
                <div class="mb-4">
                    <InputText @bind-Value="Input.Email" id="Input.Email"
                        class="input input-bordered w-full bg-base-300 text-white" autocomplete="username"
                        aria-required="true" placeholder="name@example.com" />
                    <label for="Input.Email" class="label text-white">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-error" />
                </div>
                <div class="mb-4">
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password"
                        class="input input-bordered w-full bg-base-300 text-white" autocomplete="current-password"
                        aria-required="true" placeholder="password" />
                    <label for="Input.Password" class="label text-white">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-error" />
                </div>
                <div class="form-control mb-4">
                    <label class="cursor-pointer label text-white">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="checkbox checkbox-primary bg-base-300" />
                        <span class="label-text ml-2">Remember me</span>
                    </label>
                </div>
                <div>
                    <button type="submit" class="btn btn-primary w-full">Log in</button>
                </div>
                <div class="mt-4 text-white text-center">
                    <p>
                        <a href="Account/ForgotPassword" class="link link-hover">Forgot your password?</a>
                    </p>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"
                            class="link link-hover">Register as a new user</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation" class="link link-hover">Resend email confirmation</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure:
        false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
            ToastService.ShowSuccess("Welcome back!");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
            "Account/LoginWith2fa",
            new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
            ToastService.ShowError("Error: Invalid login attempt.");
        }

    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "alper.hoca@example.com";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "Password123!";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
